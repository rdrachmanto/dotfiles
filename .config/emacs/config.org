#+TITLE: My Emacs Config
#+AUTHOR: Rakandhiya Rachmanto

* Core Defaults

** Variables

#+begin_src emacs-lisp
(setq inhibit-startup-message t
      ring-bell-function 'ignore)

(setq make-backup-files nil
      auto-save-default nil
      create-lockfiles nil)

(setq enable-recursive-minibuffers t)

(setq tab-always-indent t)

(setq use-dialog-box nil
      use-file-dialog nil)
(fset 'yes-or-no-p 'y-or-n-p)

(setq eldoc-echo-area-use-multiline-p nil)

(setq native-comp-async-report-warnings-errors 'silent)

;; (set-frame-font "Iosevka Nerd Font-10.8" nil t)
(set-frame-font "ZedMono Nerd Font-10.8" nil t)
#+end_src

** Default Minor Modes

#+begin_src emacs-lisp
(recentf-mode)
(savehist-mode)
(electric-pair-mode t)
(delete-selection-mode t)
#+end_src

** User Interface 

#+begin_src emacs-lisp
;; Autothemer
(use-package autothemer)

(load-theme 'cisco t)

(column-number-mode t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)

(defun set-modes ()
  (hl-line-mode)
  (display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
  (setq-default display-line-numbers-width 3))

(add-hook 'org-mode-hook (lambda () (set-modes)))
(add-hook 'prog-mode-hook (lambda () (set-modes)))
#+end_src

* Org Defaults

#+begin_src emacs-lisp
(setq org-fontify-whole-heading-line t
      org-pretty-entities t
      org-hide-emphasis-markers t
      org-startup-indented nil
      org-insert-heading-respect-content t)

(setq org-auto-align-tags nil
      org-tags-column 0
      org-special-ctrl-a/e t
      org-catch-invisible-edits 'show-and-error)

(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-edit-src-content-indentation 0)
#+end_src

* Packages

** Code

Anything related to code, from LSP integration to error checking and documentation-viewing

#+begin_src emacs-lisp
(use-package eglot
  :hook
  ('prog-mode . 'eglot-ensure)
  :config
  (add-to-list 'eglot-server-programs
	       '((python-mode python-ts-mode)
		 "basedpyright-langserver" "--stdio")))

(use-package eldoc-box)

;; Language major mode
(use-package markdown-mode)
(use-package arduino-mode)
(use-package r-mode)
#+end_src

** Completions

*** Common

#+begin_src emacs-lisp
(use-package embark)
#+end_src

*** Buffer Completions 

#+begin_src emacs-lisp
;; In buffer completion menu
(use-package corfu
  :defer t
  :init
  (global-corfu-mode)
  :custom
  (corfu-cycle t)
  (corfu-auto t))

(use-package cape
  :init
  (add-hook 'completion-at-point-functions #'cape-elisp-block)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-dabbrev))

#+end_src

*** Minibuffer Completions 

#+begin_src emacs-lisp
;; Minibuffer completion menu
(use-package vertico
  :init
  (vertico-mode)
  :config
  (setq vertico-resize t
	vertico-cycle t))

(use-package consult
  :config
  (setq consult-fd-args
	`((if (executable-find "fdfind" 'remote) "fdfind" "fd")
	  "--full-path --color=never --hidden --exclude .git")
	))

(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package marginalia
  :init
  (marginalia-mode)
  :config
  (setq marginalia-align 'right))
#+end_src

** Modal Editing

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-C-i-jump nil
        evil-want-keybinding nil
        evil-want-minibuffer t
        evil-move-cursor-back nil)
  :config
  (evil-mode 1)
  (evil-set-undo-system 'undo-redo))

(use-package anzu
  :init
  (global-anzu-mode +1))

(use-package evil-anzu
  :after anzu evil)

(use-package evil-collection
  :after evil
  :custom (evil-collection-setup-minibuffer t)
  :init (evil-collection-init))
#+end_src

** Org

#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-hide-emphasis-markers t
	org-startup-indented t)
  (require 'org-tempo))

(use-package org-modern
  :hook
  ('org-mode . org-modern-mode))

(use-package org-journal
  :config
  (setq org-journal-dir "~/Documents/Reflections/"))
#+end_src

** User Interface

#+begin_src emacs-lisp
(use-package nerd-icons)

(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  :hook
  ('marginalia-mode . #'nerd-icons-completion-marginalia-setup))

(use-package nerd-icons-corfu
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package doom-modeline
  :init
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-modal-icon nil))
#+end_src

** Utility

#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode))

(use-package general
  :defer t)

(use-package rainbow-delimiters
  :hook
  ('prog-mode . #'rainbow-delimiters-mode))

(use-package tree-sitter)
(use-package tree-sitter-langs
  :hook
  ('prog-mode . #'tree-sitter-hl-mode))
#+end_src

* Keybinds

#+begin_src emacs-lisp
(general-create-definer rd/leader-key
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC"
  :global-prefix "C-SPC")

(general-define-key
 :states '(normal visual insert emacs)
 "C-." 'embark-act
 "C-;" 'embark-dwim)

(general-define-key
 :keymaps 'minibuffer-local-map
 "C-." 'embark-act
 "C-;" 'embark-dwim)

;; Files
(rd/leader-key
 "f" '(:ignore t :wk "File")
 "ff" '(consult-fd :wk "Open files in current project")
 "fr" '(consult-recent-file :wk "Open files in current project"))

;; Buffers
(rd/leader-key
 "b" '(:ignore t :wk "Buffer")
 "bb" '(consult-buffer :wk "Switch buffers"))

(rd/leader-key
  :keymaps 'prog-mode-map
  ";" '(:ignore t :wk "Code")
  "; ;" '(eldoc-box-help-at-point :wk "Documentation on cursor"))
#+end_src
